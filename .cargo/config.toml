[target.'cfg(all(target_arch = "arm", target_os = "none"))']
# Choose a default "cargo run" tool (see README for more info)
# - `probe-rs` provides flashing and defmt via a hardware debugger, and stack unwind on panic
# - elf2uf2-rs loads firmware over USB when the rp2040 is in boot mode
#runner = "probe-rs download --chip RP2040 --protocol swd"
runner = "probe-rs run --chip RP2040 --protocol swd"
#runner = "elf2uf2-rs -d"

rustflags = [
  "-C", "linker=flip-link",
  "-C", "link-arg=--nmagic",
  "-C", "link-arg=-Tlink.x",
  "-C", "link-arg=-Tdefmt.x",

  # Code-size optimizations.
  #   trap unreachable can save a lot of space, but requires nightly compiler.
  #   uncomment the next line if you wish to enable it
  # "-Z", "trap-unreachable=no",
  "-C", "no-vectorize-loops",
]
[target.'cfg(target_arch = "avr")']
runner = "ravedude nano -cb 115200 -P COM3"
#runner = "avrdude -c arduino -p m328p -P COM3 -b 115200 -U flash:w:\"C:\\Users\\Gabriel\\Workspace\\Lödöl\\rust-x-arduino\\target\\avr-atmega328p\\debug\\rust-x-arduino.hex\":a #"

[unstable]
build-std = ["core"]

[build]
#target = "thumbv6m-none-eabi"
#target = "x86_64-pc-windows-gnu"
target = "avr-specs/avr-atmega328p.json"

[env]
DEFMT_LOG = "debug"

#[build]
#target = "avr-atmega328p.json"
#
#[target.'cfg(target_arch = "avr")']
#runner = "ravedude nano-new -cb 115200 -P COM3"
##runner = "avrdude -c arduino -p m328p -P COM3 -b 115200 -U flash:w:\"C:\\Users\\Gabriel\\Workspace\\Lödöl\\rust-x-arduino\\target\\avr-atmega328p\\debug\\rust-x-arduino.hex\":a #"
#
#[unstable]
#build-std = ["core"]
